import random
import time

# Constants
BOARD_SIZE = 4
TIME_LIMIT = 60  # in seconds

def initialize_board(size):
    """Initialize a board with pairs of numbers."""
    numbers = list(range(size * size // 2)) * 2
    random.shuffle(numbers)
    return [numbers[i:i + size] for i in range(0, len(numbers), size)]

def print_board(board, revealed):
    """Print the board with hidden and revealed cards."""
    for r in range(len(board)):
        row = ""
        for c in range(len(board[r])):
            if revealed[r][c]:
                row += f"{board[r][c]} "
            else:
                row += "X "
        print(row)
    print()

def get_user_input(size):
    """Get and validate user input."""
    while True:
        try:
            r, c = map(int, input("Enter row and column (e.g., '1 2'): ").split())
            if 0 <= r < size and 0 <= c < size:
                return r, c
            else:
                print("Invalid input. Please enter numbers within the board's size.")
        except ValueError:
            print("Invalid input. Please enter two integers.")

def play_game():
    board = initialize_board(BOARD_SIZE)
    revealed = [[False] * BOARD_SIZE for _ in range(BOARD_SIZE)]
    matches = 0
    attempts = 0
    start_time = time.time()

    while matches < (BOARD_SIZE * BOARD_SIZE) // 2:
        print_board(board, revealed)

        print("Select the first card to reveal:")
        r1, c1 = get_user_input(BOARD_SIZE)
        if revealed[r1][c1]:
            print("Card already revealed, choose another one.")
            continue
        
        revealed[r1][c1] = True
        print_board(board, revealed)

        print("Select the second card to reveal:")
        r2, c2 = get_user_input(BOARD_SIZE)
        if revealed[r2][c2]:
            print("Card already revealed, choose another one.")
            revealed[r1][c1] = False
            continue
        
        revealed[r2][c2] = True
        print_board(board, revealed)

        if board[r1][c1] == board[r2][c2]:
            print("It's a match!")
            matches += 1
        else:
            print("Not a match.")
            revealed[r1][c1] = False
            revealed[r2][c2] = False

        attempts += 1

        elapsed_time = time.time() - start_time
        if elapsed_time > TIME_LIMIT:
            print("Time's up!")
            break

    print(f"Game Over! You matched {matches} pairs in {attempts} attempts.")
    print_board(board, [[True] * BOARD_SIZE for _ in range(BOARD_SIZE)])

if __name__ == "__main__":
    play_game()
